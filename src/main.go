package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"
)

var config = siteConfig{}
var currentUser *user

func main() {
	if len(os.Args) == 2 && os.Args[1] == "embed" {
		embedAssets()
		return
	}

	loadConfig()  // load settings from ./config.json and setup oauth config
	setupRoutes() // configure handlers for url fragments

	server := globalHandler(http.DefaultServeMux)

	openingMessage := fmt.Sprintf("Application started! Listening locally at port %s", config.ListenURL)
	if config.IsDevelopment {
		openingMessage += " and running in DEVELOPMENT mode"
	}
	log.Println(openingMessage)
	log.Println(http.ListenAndServe(config.ListenURL, server))
}

func loadConfig() {
	configJSON, err := ioutil.ReadFile("./config.json")
	if err != nil {
		log.Fatal(err)
	}
	err = json.Unmarshal(configJSON, &config)
	if err != nil {
		log.Fatal(err)
	}

	verificationErrors := ""
	if _, err := os.Stat(config.DatabasePath); os.IsNotExist(err) {
		verificationErrors += fmt.Sprintf("database file not found at path '%s'", config.DatabasePath)
	}

	if verificationErrors != "" {
		log.Fatal(verificationErrors)
	}
}

func setupRoutes() {
	http.HandleFunc("/", indexHandler) // note: this will catch any request not caught by the others

	if config.IsDevelopment {
		http.Handle("/static/", runtimeStaticHandler())
	} else {
		http.HandleFunc("/static/", embeddedStaticHandler)
	}
}

func globalHandler(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

		// set security headers
		headers := w.Header()
		headers.Set("X-Frame-Options", "SAMEORIGIN")
		headers.Set("X-XSS-Protection", "1; mode=block")
		headers.Set("X-Content-Type-Options", "nosniff")

		csp := "default-src 'none';"
		csp += "script-src 'self';"
		csp += "style-src 'self';"
		csp += "font-src 'self';"
		csp += "connect-src 'self';"
		csp += "img-src 'self';"
		csp += "frame-src 'self';"
		headers.Set("Content-Security-Policy", csp)

		// read the current user once per request
		currentUserJSON, _ := readEncryptedCookie("user", r)
		if currentUserJSON != "" {
			// refresh the cookie
			json.Unmarshal([]byte(currentUserJSON), &currentUser)
			currentUser.setUserCookie(w)
		} else {
			currentUser = nil
		}

		h.ServeHTTP(w, r)
	})
}

func embedAssets() {
	paths := []string{"./static", "./templates"}

	out, err := os.Create("embedded.go")
	defer out.Close()

	if err != nil {
		log.Fatal(err)
	}

	header := fmt.Sprintf(`
// generated by the main.go embedAssets func
// DO NOT EDIT
// %s

package main

var embeddedAssets = map[string]string {
`, time.Now().Format(time.RFC3339))
	out.Write([]byte(header))

	for _, path := range paths {
		files, err := ioutil.ReadDir(path)
		if err != nil {
			log.Fatal(err)
		}

		for _, file := range files {
			name := file.Name()
			file, _ := ioutil.ReadFile(path + "/" + name)
			content := base64.StdEncoding.EncodeToString(file)
			fmt.Fprintf(out, "\t\"%s/%s\": \"%s\",\n", path, name, content)
		}
	}

	out.Write([]byte("\n}\n"))
}
